apply plugin: 'java'
sourceCompatibility = 1.8
targetCompatibility = 1.8

apply plugin: 'spring-boot'

apply plugin: 'jacoco'


repositories {
    maven {
        url "http://repository.jboss.org/nexus/content/groups/public"
    }
}

dependencies {
    compile project(":util")

    compile("org.springframework.boot:spring-boot-starter")
    compile("org.springframework.boot:spring-boot-starter-web")
    compile("org.springframework.boot:spring-boot-starter-undertow")
    compile("com.google.code.gson:gson:2.4")
    compile("org.springframework.boot:spring-boot-starter-hornetq")
    compile("org.hornetq:hornetq-jms-server")
    compile("org.springframework.boot:spring-boot-starter-actuator")
    compile("org.springframework.boot:spring-boot-starter-mail")

    if (project.hasProperty('with-springboot-admin')) {  // (*)
        compile("de.codecentric:spring-boot-admin-server-ui:1.2.3")
        compile("de.codecentric:spring-boot-admin-server:1.2.3")
        compile("de.codecentric:spring-boot-admin-starter-client:1.2.3")
    } else {
        sourceSets.main.java.exclude "ome/smuggler/run/SpringBootAdminServer.java"
    }

    testCompile("org.springframework.boot:spring-boot-starter-test")
}
/* (*) SpringBoot Admin support.
 * By default we don't compile it in. If you want it, you have to set the
 * with-springboot-admin build prop either on the command line, e.g.
 *
 *     $ ./gradlew -Pwith-springboot-admin build
 *
 * or in a prop file. The 'spring-boot-admin-starter-client' lib auto-configures
 * a SpringBoot Admin client if it finds a 'spring.boot.admin.url' in the app
 * props file. Our default config (SpringBootAppPropsFile) sets this prop so
 * if you build with SpringBoot Admin support the server app will also run a
 * SpringBoot Admin client to push monitoring data to the configured SpringBoot
 * Admin server.
 */

configurations {
    compile.exclude module: "spring-boot-starter-tomcat"
}

ext.mainClassName = 'ome.smuggler.Main'
ext.jarBaseName = 'ome-smuggler'

jar {
    baseName = jarBaseName
}

task exeJar(type: Jar) {  // must have same 'from', 'include', etc as jar task!
    baseName = jarBaseName
    extension = 'exe.jar'
    from sourceSets.main.output
}

task unixFullyExecJar(type: BootRepackage, dependsOn: exeJar) {
    withJarTask = exeJar
    executable = true
}

test {  // added by java plugin, but says 'Runs the unit tests.'
    description 'Runs all available tests.'
}

task test1(type: Test) {
    group 'verification'
    description 'Runs the unit tests only.'
    exclude '**/end2end/**'
    exclude '**/integration/**'
}

task test2(type: Test) {
    group 'verification'
    description 'Runs the unit and integration tests but leaves end to end tests out.'
    exclude '**/end2end/**'
}

jacocoTestReport {
    reports {
        xml.enabled true
        html.enabled true
    }
}

