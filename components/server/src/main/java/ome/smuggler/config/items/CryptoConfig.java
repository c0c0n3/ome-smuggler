package ome.smuggler.config.items;

import java.io.OutputStream;
import java.security.Key;
import java.util.Objects;

/**
 * Specifies how to configure encryption of sensitive data.
 * The available settings:
 * <ul>
 *  <li>{@link #setEncrypt(Boolean) Whether to encrypt sensitive data}.
 *  Optional parameter to specify whether sensitive data, such as session keys,
 *  should be encrypted: {@code true} for yes, {@code false} for no. Defaults
 *  to {@code false} if not specified, i.e. no encryption.
 *  </li>
 *  <li>{@link #setKey(String) Encryption key}.
 *  The key to use to encrypt data. This parameter is only used if encryption
 *  is {@link #setEncrypt(Boolean) turned on} and, in that case, it must be
 *  set to a valid Base64-encoded key as generated by the
 *  {@link ome.smuggler.core.io.crypto.CryptoKeyFactory#exportKey(Key,
 *  OutputStream) exportKey} method.
 *  </li>
 * </ul>
 */
public class CryptoConfig {
    /* NB this has to be a Java Bean (i.e. getters/setters, no args ctor) to
     * be (de-)serialized painlessly by SnakeYaml.
     */

    private Boolean encrypt;
    private String key;

    public Boolean getEncrypt() {
        return encrypt;
    }

    public void setEncrypt(Boolean encrypt) {
        this.encrypt = encrypt;
    }

    public String getKey() {
        return key;
    }

    public void setKey(String key) {
        this.key = key;
    }

    @Override
    public int hashCode() {
        return toString().hashCode();
    }

    @Override
    public boolean equals(Object other) {
        if (this == other) {
            return true;
        }
        if (other instanceof CryptoConfig) {
            return Objects.equals(other.toString(), this.toString());
        }
        return false;
    }

    @Override
    public String toString() {
        return String.format("%s | %s ", encrypt, key);
    }

}
