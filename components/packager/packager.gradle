import static util.Filez.*
import util.ReplacementMap
import packager.Staging


ext.staging = new Staging(buildDir)
ext.releaseBundleBaseName = 'ome-smuggler'
ext.releaseBundleVersion = '0.1.0'
ext.releaseBundleClassifier = 'beta'

def serverJarFile() { toFile(project(':server').jar) }
def cliJarFile() { toFile(project(':cli').jar) }

def configureBaseBundle(AbstractArchiveTask task) {
    task.from staging.baseDir
    task.into releaseBundleBaseName
    task.includeEmptyDirs = true
    task.destinationDir = buildDir
    task.baseName = releaseBundleBaseName
    task.version = releaseBundleVersion
    task.classifier = releaseBundleClassifier
}

def configureGenericBundle(AbstractArchiveTask task) {
    configureBaseBundle(task)
    task.include '**/*.md', '**/*.sh', '**/*.bat', '**/*.jar'
}


task makeStagingDirs << {
    staging.subdirs().each { d -> mkdir(d) }
}

task copyReadme(type: Copy, dependsOn: makeStagingDirs) {
    from 'src/README.md'
    into staging.baseDir
}

task copyLicense(type: Copy, dependsOn: makeStagingDirs) {
    from toFile(rootProject.projectDir, 'LICENSE.md')
    into staging.baseDir
}

task copyJars(dependsOn: [makeStagingDirs, ':server:bootRepackage',
                          ':cli:bootRepackage']) << {
    copy {
        from serverJarFile()
        from cliJarFile()
        into staging.libDir
    }
}

task copyScripts(dependsOn: makeStagingDirs) << {
    def m = [ '@lib.dir.name@' : staging.libDir.name
            , '@jar.file.name@' : serverJarFile().name
            , '@config.dir.name@' : staging.configDir.name
            , '@data.dir.name@' : staging.dataDir.name
            , '@log.dir.name@' : staging.logDir.name
            ] as ReplacementMap
    copy {
        from 'src/generic/'
        include '*.template'
        into staging.binDir
        rename { it - ~/\.template$/ }
        filter m.&replaceAll
        fileMode 0755
    }
}

task releaseGenericZip(type: Zip) {
    configureGenericBundle(releaseGenericZip)
}

task releaseGenericTar(type: Tar) {
    configureGenericBundle(releaseGenericTar)
    compression = Compression.GZIP
}

task releaseGeneric(dependsOn: [copyReadme, copyLicense, copyJars, copyScripts,
                                releaseGenericTar, releaseGenericZip])

task release (dependsOn: [releaseGeneric]) {
    group 'distribution'
    description 'Releases generic and platform-specific server deployment bundles.'
}

task clean {
    group 'build'
    description 'Deletes the build directory.'
    doLast {
        delete(buildDir)
    }
}
