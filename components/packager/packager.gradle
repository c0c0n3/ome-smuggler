import static util.Filez.*
import packager.Staging

ext.staging = new Staging(buildDir)
def serverJarFile() { toFile(project(':server').jar) }
def cliJarFile() { toFile(project(':cli').jar) }

task makeStagingDirs << {
    staging.subdirs().each { d -> mkdir(d) }
}

task copyReadme(type: Copy) {
    from 'src/README.md'
    into staging.baseDir
}

task copyLicense(type: Copy, dependsOn: makeStagingDirs) {
    from toFile(rootProject.projectDir, 'LICENSE.md')
    into staging.baseDir
}

task copyJars(dependsOn: [makeStagingDirs, ':server:bootRepackage',
                          ':cli:bootRepackage']) << {
    copy {
        from serverJarFile()
        from cliJarFile()
        into staging.libDir
    }
}

task copyScripts(dependsOn: makeStagingDirs) << {
    def m = [ '@lib.dir.name@' : staging.libDir.name
            , '@jar.file.name@' : serverJarFile().name
            , '@config.dir.name@' : staging.configDir.name
            , '@data.dir.name@' : staging.dataDir.name
            , '@log.dir.name@' : staging.logDir.name
            ]
    copy {
        from 'src/generic/'
        include '*.template'
        into staging.binDir
        rename { it - ~/\.template$/ }
        filter { String line ->
            m.inject(line, { r, e -> r.replaceAll(e.key, e.value) })
        }
    }
}

task releaseGenericZip(dependsOn: [copyReadme, copyLicense, copyJars,
                                   copyScripts]) << {

}

task release << {
    description 'Releases generic and platform-specific server deployment bundles.'
    println ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> surprise, surpise..."
    println version
    println project(':server').jar.baseName
    println ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>"
}

task clean << {
    delete(buildDir)
}
