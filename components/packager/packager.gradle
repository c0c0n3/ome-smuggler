import static util.Filez.*
import packager.*
import util.*


ext.dirs = new BuildDir(buildDir)
ext.bundle = new ReleaseBundle(dirs, new ReleaseInfo(
                                [ baseName:   'ome-smuggler'
                                , version:    version
                                , classifier: 'beta'
                                ]))

def serverJarFile() { toFile(project(':server').jar) }
def cliJarFile() { toFile(project(':cli').jar) }


task makeBuildDirs << {
    dirs.subdirs().each { d -> mkdir(d) }
}

task copyReadme(type: Copy, dependsOn: makeBuildDirs) {
    from 'src/README.md'
    into dirs.staging.baseDir
}

task copyLicense(type: Copy, dependsOn: makeBuildDirs) {
    from toFile(rootProject.projectDir, 'LICENSE.md')
    into dirs.staging.baseDir
}

task copyJars(dependsOn: [makeBuildDirs, ':server:bootRepackage',
                          ':cli:bootRepackage']) << {
    copy {
        from serverJarFile()
        from cliJarFile()
        into dirs.staging.libDir
    }
}

task copyScripts(dependsOn: makeBuildDirs) << {
    def m = [ '@server.args@' : ServerGenericCliBuilder
                                .buildWindowsArgs(dirs, serverJarFile().name)
            ] as ReplacementMap
    copy {
        from 'src/generic/'
        include '*.bat.template'
        into dirs.staging.binDir
        rename { it - ~/\.template$/ }
        filter m.&replaceAll
    }

    m['@server.args@'] = ServerGenericCliBuilder
                        .buildUnixArgs(dirs, serverJarFile().name)
    copy {
        from 'src/generic/'
        include '*.sh.template'
        into dirs.staging.binDir
        rename { it - ~/\.template$/ }
        filter m.&replaceAll
        fileMode 0755
    }
}

task releaseGenericZip(type: Zip) {
    bundle.configureGeneric(releaseGenericZip)
}

task releaseGenericTar(type: Tar) {
    bundle.configureGeneric(releaseGenericTar)
    compression = Compression.GZIP
}

task releaseGeneric(dependsOn: [copyReadme, copyLicense, copyJars, copyScripts,
                                releaseGenericTar, releaseGenericZip])

task release (dependsOn: [releaseGeneric]) {
    group 'distribution'
    description 'Releases generic and platform-specific server deployment bundles.'
}

task clean {
    group 'build'
    description 'Deletes the build directory.'
    doLast {
        delete(buildDir)
    }
}
