import static util.Filez.*
import packager.*
import util.*


ext.dirs = new BuildDir(buildDir)
ext.bundle = new ReleaseBundle(dirs, new ReleaseInfo(
                                [ baseName:   'ome-smuggler'
                                , version:    version
                                , classifier: 'beta'
                                ]))

def serverJarFile() { toFile(project(':server').jar) }
def cliJarFile() { toFile(project(':cli').jar) }
def windowsCli() {
    [ '@server.args@' : ServerGenericCliBuilder
                        .buildWindowsArgs(dirs, serverJarFile().name)
    ] as ReplacementMap
}
def unixCli() {
    [ '@server.args@' : ServerGenericCliBuilder
                        .buildUnixArgs(dirs, serverJarFile().name)
    ] as ReplacementMap
}


configurations {
    fetch
}
dependencies {
    fetch 'com.sun.winsw:winsw:1.9:bin@exe'
}


task makeBuildDirs << {
    dirs.subdirs().each { d -> mkdir(d) }
}

task copyReadme(type: Copy, dependsOn: makeBuildDirs) {
    from 'src/README.md'
    into dirs.staging.baseDir
}

task copyLicense(type: Copy, dependsOn: makeBuildDirs) {
    from toFile(rootProject.projectDir, 'LICENSE.md')
    into dirs.staging.baseDir
}

task copyJars(dependsOn: [makeBuildDirs, ':server:bootRepackage',
                          ':cli:bootRepackage']) << {
    copy {
        from serverJarFile()
        from cliJarFile()
        into dirs.staging.libDir
    }
}

task copyScripts(dependsOn: makeBuildDirs) << {
    copy {
        from 'src/generic/'
        include '*.bat.template'
        into dirs.staging.binDir
        rename { it - ~/\.template$/ }
        filter windowsCli().&replaceAll
    }
    copy {
        from 'src/generic/'
        include '*.sh.template'
        into dirs.staging.binDir
        rename { it - ~/\.template$/ }
        filter unixCli().&replaceAll
        fileMode 0755
    }
}

task copyWinService(dependsOn: makeBuildDirs) << {
    def svcName = bundle.info.baseName
    copy {
        from configurations.fetch
        include '*.exe'
        into dirs.staging.binDir
        rename { svcName + '.exe' }
    }
    copy {
        from 'src/winsvc/'
        include 'service.xml.template'
        into dirs.staging.binDir
        rename { svcName + '.xml' }
        filter windowsCli().&replaceAll
    }
}

task releaseGenericZip(type: Zip) {
    bundle.configureGeneric(releaseGenericZip)
}

task releaseGenericTar(type: Tar) {
    bundle.configureGeneric(releaseGenericTar)
    compression = Compression.GZIP
}

task releaseGeneric(dependsOn: [copyReadme, copyLicense, copyJars, copyScripts,
                                releaseGenericTar, releaseGenericZip])

task releaseWinServiceZip(type: Zip) {
    bundle.configureWinService(releaseWinServiceZip)
}

task releaseWinService(dependsOn: [copyReadme, copyLicense, copyJars,
                                   copyWinService, releaseWinServiceZip])

task release (dependsOn: [releaseGeneric, releaseWinService]) {
    group 'distribution'
    description 'Releases generic and platform-specific server deployment bundles.'
}

task clean {
    group 'build'
    description 'Deletes the build directory.'
    doLast {
        delete(buildDir)
    }
}
