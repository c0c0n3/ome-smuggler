import java.nio.file.Files
import java.nio.file.Path
import java.nio.file.Paths


class Assembly {

    File buildDir
    Path baseDir, binDir, configDir, dataDir, libDir

    Assembly(File buildDir) {
        this.buildDir = buildDir
        baseDir = Paths.get(buildDir.absolutePath, 'assembly')
        binDir = baseDir.resolve('bin')
        configDir = baseDir.resolve('config')
        dataDir = baseDir.resolve('data')
        libDir = baseDir.resolve('lib')
    }

    def mkdirs() {
        Files.createDirectories(binDir)
        Files.createDirectories(configDir)
        Files.createDirectories(dataDir)
        Files.createDirectories(libDir)
    }

    def copyJar(Project proj) {
        def jarPath = Paths.get(
                proj.tasks.findByName('jar').archivePath.absolutePath)
        Files.copy(jarPath, libDir.resolve(jarPath.fileName))
    }

}

ext.assembly = new Assembly(buildDir)
/*
task copyJars(type: Copy) << {
    println project(':server').tasks.findByName('jar').archivePath
    //from files( project(':server').tasks.findByName('jar').archivePath
    //          , project(':cli').tasks.findByName('jar').archivePath
    //          )
    //into assembly.libDir
}
*/
task assemble << { //(dependsOn: [':server:assemble', ':cli:assemble', 'clean']) << {
    assembly.mkdirs()
    assembly.copyJar(project(':server'))
    assembly.copyJar(project(':cli'))
}

task clean << {
    def p = Paths.get(buildDir.absolutePath)
    Files.deleteIfExists(p)
}
